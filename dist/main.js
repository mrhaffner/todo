/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements:  */
eval("//todo properties\r\n    //minimum: description, dueDate and priority\r\n\r\n// separate your application logic (i.e. creating new todos, setting todos as complete, changing todo priority etc.) from the DOM-related stuff, so keep all of those things in separate modules.\r\n\r\n//UI\r\n    //expand a single todo to see/edit its details\r\n\r\n//Use localStorage to save userâ€™s projects and todos between sessions.??????????????\r\n\r\n//Since you are probably already using webpack, adding external libraries from npm is a cinch! You might want to consider using the following useful library in your code:\r\n    //date-fns gives you a bunch of handy functions for formatting and manipulating dates and times.\r\n\r\n//strucure:\r\n    //index file holds the basic sidebar\r\n    //another file holds what is loaded in the sidebar\r\n    //another holds what is loads in current project\r\n\r\n//if main is empty (there are now projects) when you create a new project, that project should appear in main\r\n\r\nconst projectsList = (() => {\r\n    const projectArr = [\r\n        {\r\n            name: 'Default Project',\r\n            projId: 0,\r\n            currentTaskId: 2,\r\n            tasks: [\r\n                {\r\n                    taskId: 0,\r\n                    name: 'default task',\r\n                    note: 'I am a note.',\r\n                    dueDate: '1985',\r\n                    priority: '1',\r\n                },\r\n                {\r\n                    taskId: 1,\r\n                    name: 'second default task',\r\n                    note: 'I am also a note.',\r\n                    dueDate: 'The Year 2000',\r\n                    priority: '88',\r\n                },\r\n            ]\r\n        },\r\n    ];\r\n    let currentId = 1;\r\n    return { projectArr, currentId };\r\n})();\r\n\r\nconst Project = (name, id) => {\r\n    const projId = id;\r\n    const currentTaskId = 0;\r\n    const tasks = [];\r\n    return { name, projId, currentTaskId, tasks };\r\n};\r\n\r\nfunction addProject(project) {\r\n    projectsList.projectArr.push(project)\r\n}\r\n\r\nconst Task = (name, id) => {\r\n    const taskId = id;\r\n    return { name, taskId };\r\n};\r\n\r\n\r\n//create a pop up form in html (then maybe eventually dynamically generate it with Javascript on new project button click)\r\n    //probably make it pop up later in development, just have it in the sidebar for now\r\nconst submitBtn = document.getElementById('proj_form_submit_btn');\r\nsubmitBtn.addEventListener('click', () => {\r\n    const inputName = document.getElementById('proj_title_input').value;\r\n    let inputId = projectsList.currentId\r\n    projectsList.currentId ++;\r\n    projectsList.projectArr.push(Project(inputName, inputId));\r\n    addProjectSide(inputName, inputId);\r\n})\r\n\r\nfunction addProjectSide(name, id) {\r\n    const sideNode = document.getElementById('side_proj_div');\r\n    let newDiv = document.createElement('div')\r\n    newDiv.id = `side_${id}_div`\r\n    let newProject = \r\n        `<h3 id=side_${id}_title\">${name}</h3>\r\n        <button id=\"side_${id}_delete\">Delete</button>`;\r\n    newDiv.innerHTML = newProject;\r\n    sideNode.appendChild(newDiv);\r\n    addProjectBtn(newDiv.firstChild, name, id); //might need to change this to something other than .firstChild when you reorganize the DOM tree!!!!!!!\r\n    addDeleteProj(id, newDiv)\r\n    }; \r\n\r\nfunction addDeleteProj(id, parent) {\r\n    const dBtn = document.getElementById(`side_${id}_delete`)\r\n    dBtn.addEventListener('click', () => {\r\n        let objIndex = projectsList.projectArr.findIndex((x) => x === +id);\r\n        projectsList.projectArr.slice(objIndex, 1);\r\n        parent.remove();\r\n        if (document.getElementById(`${id}_proj`)) {\r\n            clearMain();\r\n        };\r\n    })\r\n}\r\n\r\nfunction addProjectBtn(proj, name, id) {\r\n    proj.addEventListener('click', () => {\r\n        clearMain();\r\n        addProjectMain(name, id);\r\n    })\r\n};\r\n\r\nfunction clearMain() {\r\n    const projMain = document.getElementById('proj_div')\r\n    while (projMain.firstChild) {\r\n        projMain.removeChild(projMain.firstChild);\r\n    }\r\n};\r\n\r\nfunction addProjectMain(name, id) { //get rid of the (name/id dependencies here if possible - maybe get the id on click, then find the correct object and use that to populate !!!! have to do this to populate todos correctly!!!!!)\r\n    const projMain = document.getElementById('proj_div')\r\n    const projectContents = \r\n        `<div id=\"${id}\">\r\n            <div id=\"${id}_proj_top\">\r\n                <div id=\"${id}_proj_title_div\">\r\n                    <h2 id=\"${id}_proj_title\">${name}</h2>\r\n                </div>\r\n                <div id=\"${id}_proj_btn_div\">\r\n                    <input type=\"text\" id=\"${id}_proj_task_input\">\r\n                    <button id=\"${id}_proj_btn\">New Task</button>\r\n                </div>\r\n            </div>\r\n            <div id=\"task_container\">\r\n            </div>\r\n        </div>`\r\n    projMain.innerHTML = projectContents\r\n    const taskContainer = document.getElementById(`task_container`);//might not need this\r\n    //let currentProject = projectsList.projectArr.filter(obj => obj.projId === +id)[0];\r\n    //currentProject.tasks.forEach(task => addTaskDOM(task.name, task.taskId, id, taskContainer)); //this is wha tyou are replacing\r\n    populateTasks();\r\n    addTaskBtn(id, taskContainer);//become part of populate tasks\r\n};\r\n\r\nfunction addTaskBtn(id, task) {\r\n    const taskBtn = document.getElementById(`${id}_proj_btn`)\r\n    taskBtn.addEventListener('click', () => {\r\n        const inputText = document.getElementById(`${id}_proj_task_input`).value;\r\n        let projIndex = projectsList.projectArr.findIndex((x) => x.projId === +id);\r\n        let addId = projectsList.projectArr[projIndex].currentTaskId;\r\n        projectsList.projectArr[projIndex].currentTaskId ++;\r\n        projectsList.projectArr[projIndex].tasks.push(Task(inputText, addId));\r\n        //addTaskDOM(inputText, addId, id, task);//also want to replace this with just populateTasks\r\n        //remove tasks function or just populate main or keep addTaskDom and feed the correct task into it\r\n        populateTasks();\r\n    })\r\n}\r\n\r\n\r\n//nothing should be fed into addTaskDom, it should read the appropariate task object and populate the tasks from there\r\n// let taskPId = function() {\r\n\r\n// }\r\n// let taskId = function() {\r\n    \r\n// }\r\n// let taskName = function() {\r\n    \r\n// }\r\n// let taskNote = function() {\r\n    \r\n// }\r\n// let taskDueDate = function() {\r\n    \r\n// }\r\n// let taskPriority = function() {\r\n    \r\n// }\r\n\r\nfunction getProjectNum() {\r\n    let projNum = document.getElementById('proj_div').firstElementChild.id;\r\n    let projIndex = projectsList.projectArr.findIndex((x) => x.projId === +projNum)\r\n    return projIndex;\r\n}\r\n\r\nfunction populateTasks() {\r\n    //function to remove tasks\r\n    //get the value of whatever the current open project is?\r\n    //remove\r\n    clearTasks();\r\n    projectsList.projectArr[getProjectNum()].tasks.forEach(x => addTaskDOM(x));\r\n}\r\n\r\nfunction clearTasks() {\r\n    const taskBox = document.getElementById('task_container')\r\n    while (taskBox.firstChild) {\r\n        taskBox.removeChild(taskBox.firstChild);\r\n    }\r\n}\r\n\r\nfunction addTaskDOM(task) {\r\n    let newTaskDiv = document.createElement('div');\r\n    newTaskDiv.dataset.task_id = task.taskId;//do i need this?\r\n    let newTask = \r\n    `<p>${task.name}</p>\r\n    <p>${task.note}</p>\r\n    <p>${task.dueDate}</p>\r\n    <p>${task.priority}</p>\r\n    <button id='task_${task.taskId}_delete'>Delete</button>`;//???do I need this id?\r\n    newTaskDiv.innerHTML = newTask;\r\n    let taskDiv = document.getElementById('task_container')\r\n    taskDiv.appendChild(newTaskDiv);\r\n    addDeleteTask(task);\r\n}\r\n\r\n\r\nfunction addDeleteTask (task) {\r\n    let taskDltBtn = document.getElementById(`task_${task.taskId}_delete`) //look within parent for a delete class?\r\n    taskDltBtn.addEventListener('click', () => {\r\n        let projIndex = projectsList.projectArr.findIndex((x) => x.projId === getProjectNum()); //how to get pId?\r\n        let taskIndex = projectsList.projectArr[projIndex].tasks.findIndex((x) => x.taskId === +task.taskId);//compare against task_id value?\r\n        projectsList.projectArr[projIndex].tasks.splice(taskIndex, 1);\r\n        taskDltBtn.parentElement.remove(); //careful when refactoring DOM tree\r\n        \r\n    })\r\n}\r\n\r\n\r\n// function addDeleteTask (id, pId) {\r\n//     let taskDltBtn = document.getElementById(`task_${id}_delete`) //look within parent for a delete class?\r\n//     taskDltBtn.addEventListener('click', () => {\r\n//         let projIndex = projectsList.projectArr.findIndex((x) => x.projId === +pId); //how to get pId?\r\n//         let taskIndex = projectsList.projectArr[projIndex].tasks.findIndex((x) => x.taskId === +id);//compare against task_id value\r\n//         projectsList.projectArr[projIndex].tasks.splice(taskIndex, 1);\r\n//         taskDltBtn.parentElement.remove(); //careful when refactoring DOM tree\r\n        \r\n//     })\r\n// }\r\n\r\n// function addTaskDOM (name, id, pId, parent) {\r\n//     let newTaskDiv = document.createElement('div');\r\n//     newTaskDiv.id = `${pId}_proj_${id}_task_div`;\r\n//     let newTask = \r\n//         `<p>${name}</p>\r\n//         <button id='task_${id}_delete'>Delete</button>`;\r\n//     newTaskDiv.innerHTML = newTask;\r\n//     parent.appendChild(newTaskDiv);\r\n//     addDeleteTask(id, pId);\r\n// };\r\n\r\naddProjectMain('Default Project', 0);\r\nlet defaultProj = document.getElementById('side_0_title');\r\naddProjectBtn(defaultProj, 'Default Project', 0); /*probably make this so it get from the object or not*/\r\naddDeleteProj(0, defaultProj.parentElement)\r\n//maybe make a function that does all this shit/make the default proj in sidebar be generated on load\n\n//# sourceURL=webpack://todo/./src/index.js?");
/******/ })()
;